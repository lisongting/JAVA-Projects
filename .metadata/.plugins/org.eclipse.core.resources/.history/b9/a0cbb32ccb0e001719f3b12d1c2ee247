package nowcode;

import binarytree.BinaryTree;

public class Main12 {
	public class TreeNode {
	    int val = 0;
	    TreeNode left = null;
	    TreeNode right = null;

	    public TreeNode(int val) {
	        this.val = val;

	    }

		public TreeNode addNode(TreeNode root, int i, boolean b) {
			// TODO Auto-generated method stub
			return null;
		}

	}
	public TreeNode addNode(TreeNode parent,int data,boolean isLeft){
		if(parent == null){
			throw new RuntimeException("parent节点为null,无法添加子节点");
		}
		if(isLeft && parent.left!=null){
			throw new RuntimeException("parent已有左子节点,无法添加子节点");
		}
		if(!isLeft && parent.right!=null){
			throw new RuntimeException("parent已有右子节点,无法添加子节点");
		}
		TreeNode newNode = new TreeNode(data);
		if(isLeft){
			parent.left = newNode;
		}else{
			parent.right = newNode;
		}
		return newNode;
	}
	
	static boolean isSymmetrical(TreeNode pRoot)
	{
	   if(pRoot==null){
		   return false;
	   }	
	   if(pRoot.left.val == pRoot.right.val){
		   return judge(pRoot.left,pRoot.right);
	   }else{
		   return false;
	   } 
	   
	}
	static boolean judge(TreeNode n1,TreeNode n2){
		if((n1.left==null&&n2.right!=null)||(n1.right==null && n2.left!=null)){
			return false;
		}
		if((n1.left==null&& n1.right==null) &&( n2.left==null && n2.right==null)){
			return n1.val==n2.val;
		}
		if(n1.val == n2.val){
			if((n1.left==null && n2.right==null) && (n1.right.val==n2.left.val)){
				return judge(n1.right,n2.left);
			}else if((n1.left.val==n2.right.val) && (n1.right==null && n2.left==null)){
				return judge(n1.left,n2.right);
			}else if(n1.right.val == n2.left.val && n1.left.val==n2.right.val){
				return judge(n1.right,n2.left) && judge(n1.left,n2.right);
			}else{
				return false;
			}
		}else{
			return false;
		}
		
	}
	public static void main(String[] args) {
		TreeNode root = new TreeNode(8);
		TreeNode tn1 = root.addNode(root, 6, true);
		TreeNode tn2 = root.addNode(root, 6, false);
		TreeNode tn3 = root.addNode(tn2, 5, true);
		TreeNode tn4 = root.addNode(tn2, 7, false);
		TreeNode tn5 = root.addNode(tn3, 7, true);
		TreeNode tn6 = root.addNode(tn3, 7, false);
		System.out.println(isSymmetrical(root));
	}
}
